# Only the system vendor should modify this file, ordinary users
# should not have to change anything.

[main]

# The file to read before this file, to override values. If the file
# does not exist then it is ignored.
#
override_config=/etc/yum.conf

# The directory to download packages and metadata to
#
cachedir=/var/cache/zif/$basearch/$releasever

# Some packages are allowed multiple versions, e.g. most kernel packages
#
installonly_limit=3

# These packages are allowed multiple versions
#
installonlypkgs=kernel,kernel-bigmem,kernel-enterprise,kernel-smp,kernel-modules,kernel-debug,kernel-unsupported,kernel-source,kernel-devel,kernel-PAE,kernel-PAE-debug

# Whether to keep packages after they've been downloaded
#
keepcache=0

# The pid file used as a lock. We have to share the metadata lock with
# yum, so we'll use it's pid file as our own too.
#
pidfile=/var/run/yum.pid

# The time in days that defines if a package added to a repo is 'new'
# and should be added to the new group.
#
recent=7

# The repository configuration location, i.e. where the .repo file go.
#
reposdir=/etc/yum.repos.d

# The number of times a file download should be retried before the
# mirror is skipped and blacklisted.
#
retries=3

# Always assume the answer to any promps are yes, and do not ask any
# questions at all.
#
assumeyes=false

# The maximum bandwidth to use in bytes/second.
#
# TODO: implement
#
bandwidth=0

# If we should allow rpm to check disk space before starting the
# transaction.
#
diskspacecheck=true

# These are packages that cannot change arch on update.
#
# TODO: implement
#
exactarchlist=kernel,kernel-smp,kernel-hugemem,kernel-enterprise,kernel-bigmem,kernel-devel,kernel-PAE,kernel-PAE-debug

# If set, then only packages that provide the exacy system dep will be
# installed. This means that i386 packages will not be installed on a
# x64 system to satisfy deps, for example.
#
exactarch=false

# Packages to ignore from the updates check. Packages listed here will
# not be updated, installed or removed.
#
exclude=

# This is how mirrors are chosen if one fails. The options are:
# - roundrobin: random selection
# - ordered: the mirror next in the list is chosen, which makes it
#            predictable over several runs.
#
failovermethod=roundrobin

# If we should check the packages for thier GPG signatures. This
# overrides any gpgcheck value specified in each repo file.
#
# TODO: implement
#
gpgcheck=true

# This decides how Zif defines a comps group as installed or available.
# Packages have to be in the specified groups to be 'installed'.
# Options are:
# - mandatory
# - default
# - optional
#
# TODO: implement
#
group_package_types=mandatory,default

# The logfile to write package operations to.
#
logfile=/var/log/zif.log

# The default metadata expire value. Only metadata older than this will
# be re-downloaded.
#
metadata_expire=21600

# How we should deal with multilib packages
# The options are 'best' and 'all', where:
#  - all: install any/all arches you can
#  - best: use the 'best  arch' for the system
#
# TODO: implement
#
multilib_policy=best

# This is a list of packages that cannot be removed or obsoleted.
#
protected_packages=zif

# The proxy used to download packages
#
# TODO: implement
#
proxy=

# The proxy password.
#
# TODO: implement
#
proxy_password=

# The proxy username.
#
# TODO: implement
#
proxy_username=

# Should we perform a signature check on the repodata. This overrides
# any setting in the repo files.
#
# TODO: implement
#
repo_gpgcheck=true

# Whether we should do the rpm test transaction.
#
rpm_check_debug=true

# RPM output level. Options are:
#  - critical
#  - emergency
#  - error
#  - warn
#  - debug
#
rpmverbosity=info

# If we should enable skip-broken by default, which skips packages (and
# dependencies) that would fail the transaction.
#
skip_broken=false

# Number of seconds to wait for a remote connection before timing out.
#
# TODO: implement
#
timeout=30

# The directory to place boot images needed for upgrade
#
upgrade_boot_dir=/boot/upgrade

# The directory to download release data
#
upgrade_cache_dir=/var/cache/PackageKit

# The directory to create the upgrade repository
#
upgrade_repo_dir=/var/cache/yum/preupgrade

# The URI location to get the releases information from
#
upgrade_releases_uri=http://mirrors.fedoraproject.org/releases.txt
